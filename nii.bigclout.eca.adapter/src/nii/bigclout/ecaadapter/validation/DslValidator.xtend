/*
 * generated by Xtext 2.13.0
 */
package nii.bigclout.ecaadapter.validation

import org.eclipse.xtext.validation.Check
import nii.bigclout.ecaadapter.dsl.Trigger
import nii.bigclout.ecaadapter.dsl.Action

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DslValidator extends AbstractDslValidator {
	
	public static val DUPLICATE_NAME = 'duplicateName'
/*
	@Check
	def checkGreetingStartsWithCapital(RunTimeModel model) {
		if (!Character.isUpperCase(greeting.name.charAt(0))) {
			warning('Name should start with a capital', 
					DslPackage.Literals.GREETING__NAME,
					INVALID_NAME)
		}
	}
*/

// write a validation to the state. 
//make sure that the specified states are the ones that the resource can be....
	
	@Check 
	def void checkTriggerStateIsValid(Trigger trigger){
		var nii.bigclout.ecaadapter.dsl.State s = trigger.state;
		var nii.bigclout.ecaadapter.dsl.Resource r = trigger.resource;
		var boolean flag = false;
		for(nii.bigclout.ecaadapter.dsl.State tmp : r.states) {
			if(s.name == tmp.name) {
				flag = true;
			}
		}
		if(flag == false) {
			error("The state in the trigger is not valid for "+ r.name+".", null);
		}	
	}
	
	@Check
	def void checkActionStateIsValid(Action action){
				var nii.bigclout.ecaadapter.dsl.State s = action.state;
		var nii.bigclout.ecaadapter.dsl.Resource r = action.resource;
		
				var boolean flag = false;
		for(nii.bigclout.ecaadapter.dsl.State tmp : r.states) {
			if(s.name == tmp.name) {
				flag = true;
			}
		}
		if(flag == false) {
			error("The state is not valid for "+ r.name+" in the action.", null);
		}
	}
}
