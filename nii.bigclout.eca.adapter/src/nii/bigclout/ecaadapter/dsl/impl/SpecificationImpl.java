/**
 * generated by Xtext 2.13.0.RC1
 */
package nii.bigclout.ecaadapter.dsl.impl;

import java.util.Collection;

import nii.bigclout.ecaadapter.dsl.DslPackage;
import nii.bigclout.ecaadapter.dsl.ElseDoSpec;
import nii.bigclout.ecaadapter.dsl.ElseIfDoSpec;
import nii.bigclout.ecaadapter.dsl.IfDoSpec;
import nii.bigclout.ecaadapter.dsl.Specification;
import nii.bigclout.ecaadapter.dsl.Trigger;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Specification</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link nii.bigclout.ecaadapter.dsl.impl.SpecificationImpl#getSpecID <em>Spec ID</em>}</li>
 *   <li>{@link nii.bigclout.ecaadapter.dsl.impl.SpecificationImpl#getPriority <em>Priority</em>}</li>
 *   <li>{@link nii.bigclout.ecaadapter.dsl.impl.SpecificationImpl#getTrigger <em>Trigger</em>}</li>
 *   <li>{@link nii.bigclout.ecaadapter.dsl.impl.SpecificationImpl#getIfdo <em>Ifdo</em>}</li>
 *   <li>{@link nii.bigclout.ecaadapter.dsl.impl.SpecificationImpl#getElseIfDo <em>Else If Do</em>}</li>
 *   <li>{@link nii.bigclout.ecaadapter.dsl.impl.SpecificationImpl#getElseDo <em>Else Do</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SpecificationImpl extends MinimalEObjectImpl.Container implements Specification
{
  /**
	 * The default value of the '{@link #getSpecID() <em>Spec ID</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getSpecID()
	 * @generated
	 * @ordered
	 */
  protected static final String SPEC_ID_EDEFAULT = null;

  /**
	 * The cached value of the '{@link #getSpecID() <em>Spec ID</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getSpecID()
	 * @generated
	 * @ordered
	 */
  protected String specID = SPEC_ID_EDEFAULT;

  /**
	 * The default value of the '{@link #getPriority() <em>Priority</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getPriority()
	 * @generated
	 * @ordered
	 */
  protected static final int PRIORITY_EDEFAULT = 0;

  /**
	 * The cached value of the '{@link #getPriority() <em>Priority</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getPriority()
	 * @generated
	 * @ordered
	 */
  protected int priority = PRIORITY_EDEFAULT;

  /**
	 * The cached value of the '{@link #getTrigger() <em>Trigger</em>}' containment reference list.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getTrigger()
	 * @generated
	 * @ordered
	 */
  protected EList<Trigger> trigger;

  /**
	 * The cached value of the '{@link #getIfdo() <em>Ifdo</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getIfdo()
	 * @generated
	 * @ordered
	 */
  protected IfDoSpec ifdo;

  /**
	 * The cached value of the '{@link #getElseIfDo() <em>Else If Do</em>}' containment reference list.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getElseIfDo()
	 * @generated
	 * @ordered
	 */
  protected EList<ElseIfDoSpec> elseIfDo;

  /**
	 * The cached value of the '{@link #getElseDo() <em>Else Do</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getElseDo()
	 * @generated
	 * @ordered
	 */
  protected ElseDoSpec elseDo;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected SpecificationImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  protected EClass eStaticClass()
  {
		return DslPackage.Literals.SPECIFICATION;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public String getSpecID()
  {
		return specID;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setSpecID(String newSpecID)
  {
		String oldSpecID = specID;
		specID = newSpecID;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.SPECIFICATION__SPEC_ID, oldSpecID, specID));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public int getPriority()
  {
		return priority;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setPriority(int newPriority)
  {
		int oldPriority = priority;
		priority = newPriority;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.SPECIFICATION__PRIORITY, oldPriority, priority));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public EList<Trigger> getTrigger()
  {
		if (trigger == null) {
			trigger = new EObjectContainmentEList<Trigger>(Trigger.class, this, DslPackage.SPECIFICATION__TRIGGER);
		}
		return trigger;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public IfDoSpec getIfdo()
  {
		return ifdo;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetIfdo(IfDoSpec newIfdo, NotificationChain msgs)
  {
		IfDoSpec oldIfdo = ifdo;
		ifdo = newIfdo;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.SPECIFICATION__IFDO, oldIfdo, newIfdo);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setIfdo(IfDoSpec newIfdo)
  {
		if (newIfdo != ifdo) {
			NotificationChain msgs = null;
			if (ifdo != null)
				msgs = ((InternalEObject)ifdo).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.SPECIFICATION__IFDO, null, msgs);
			if (newIfdo != null)
				msgs = ((InternalEObject)newIfdo).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.SPECIFICATION__IFDO, null, msgs);
			msgs = basicSetIfdo(newIfdo, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.SPECIFICATION__IFDO, newIfdo, newIfdo));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public EList<ElseIfDoSpec> getElseIfDo()
  {
		if (elseIfDo == null) {
			elseIfDo = new EObjectContainmentEList<ElseIfDoSpec>(ElseIfDoSpec.class, this, DslPackage.SPECIFICATION__ELSE_IF_DO);
		}
		return elseIfDo;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public ElseDoSpec getElseDo()
  {
		return elseDo;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetElseDo(ElseDoSpec newElseDo, NotificationChain msgs)
  {
		ElseDoSpec oldElseDo = elseDo;
		elseDo = newElseDo;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.SPECIFICATION__ELSE_DO, oldElseDo, newElseDo);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public void setElseDo(ElseDoSpec newElseDo)
  {
		if (newElseDo != elseDo) {
			NotificationChain msgs = null;
			if (elseDo != null)
				msgs = ((InternalEObject)elseDo).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.SPECIFICATION__ELSE_DO, null, msgs);
			if (newElseDo != null)
				msgs = ((InternalEObject)newElseDo).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.SPECIFICATION__ELSE_DO, null, msgs);
			msgs = basicSetElseDo(newElseDo, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.SPECIFICATION__ELSE_DO, newElseDo, newElseDo));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
		switch (featureID) {
			case DslPackage.SPECIFICATION__TRIGGER:
				return ((InternalEList<?>)getTrigger()).basicRemove(otherEnd, msgs);
			case DslPackage.SPECIFICATION__IFDO:
				return basicSetIfdo(null, msgs);
			case DslPackage.SPECIFICATION__ELSE_IF_DO:
				return ((InternalEList<?>)getElseIfDo()).basicRemove(otherEnd, msgs);
			case DslPackage.SPECIFICATION__ELSE_DO:
				return basicSetElseDo(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
		switch (featureID) {
			case DslPackage.SPECIFICATION__SPEC_ID:
				return getSpecID();
			case DslPackage.SPECIFICATION__PRIORITY:
				return getPriority();
			case DslPackage.SPECIFICATION__TRIGGER:
				return getTrigger();
			case DslPackage.SPECIFICATION__IFDO:
				return getIfdo();
			case DslPackage.SPECIFICATION__ELSE_IF_DO:
				return getElseIfDo();
			case DslPackage.SPECIFICATION__ELSE_DO:
				return getElseDo();
		}
		return super.eGet(featureID, resolve, coreType);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
		switch (featureID) {
			case DslPackage.SPECIFICATION__SPEC_ID:
				setSpecID((String)newValue);
				return;
			case DslPackage.SPECIFICATION__PRIORITY:
				setPriority((Integer)newValue);
				return;
			case DslPackage.SPECIFICATION__TRIGGER:
				getTrigger().clear();
				getTrigger().addAll((Collection<? extends Trigger>)newValue);
				return;
			case DslPackage.SPECIFICATION__IFDO:
				setIfdo((IfDoSpec)newValue);
				return;
			case DslPackage.SPECIFICATION__ELSE_IF_DO:
				getElseIfDo().clear();
				getElseIfDo().addAll((Collection<? extends ElseIfDoSpec>)newValue);
				return;
			case DslPackage.SPECIFICATION__ELSE_DO:
				setElseDo((ElseDoSpec)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eUnset(int featureID)
  {
		switch (featureID) {
			case DslPackage.SPECIFICATION__SPEC_ID:
				setSpecID(SPEC_ID_EDEFAULT);
				return;
			case DslPackage.SPECIFICATION__PRIORITY:
				setPriority(PRIORITY_EDEFAULT);
				return;
			case DslPackage.SPECIFICATION__TRIGGER:
				getTrigger().clear();
				return;
			case DslPackage.SPECIFICATION__IFDO:
				setIfdo((IfDoSpec)null);
				return;
			case DslPackage.SPECIFICATION__ELSE_IF_DO:
				getElseIfDo().clear();
				return;
			case DslPackage.SPECIFICATION__ELSE_DO:
				setElseDo((ElseDoSpec)null);
				return;
		}
		super.eUnset(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean eIsSet(int featureID)
  {
		switch (featureID) {
			case DslPackage.SPECIFICATION__SPEC_ID:
				return SPEC_ID_EDEFAULT == null ? specID != null : !SPEC_ID_EDEFAULT.equals(specID);
			case DslPackage.SPECIFICATION__PRIORITY:
				return priority != PRIORITY_EDEFAULT;
			case DslPackage.SPECIFICATION__TRIGGER:
				return trigger != null && !trigger.isEmpty();
			case DslPackage.SPECIFICATION__IFDO:
				return ifdo != null;
			case DslPackage.SPECIFICATION__ELSE_IF_DO:
				return elseIfDo != null && !elseIfDo.isEmpty();
			case DslPackage.SPECIFICATION__ELSE_DO:
				return elseDo != null;
		}
		return super.eIsSet(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String toString()
  {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (specID: ");
		result.append(specID);
		result.append(", priority: ");
		result.append(priority);
		result.append(')');
		return result.toString();
	}

} //SpecificationImpl
