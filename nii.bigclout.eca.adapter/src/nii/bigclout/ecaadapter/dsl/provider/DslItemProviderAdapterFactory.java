/**
 * generated by Xtext 2.13.0.RC1
 */
package nii.bigclout.ecaadapter.dsl.provider;

import java.util.ArrayList;
import java.util.Collection;

import nii.bigclout.ecaadapter.dsl.util.DslAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DslItemProviderAdapterFactory extends DslAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DslItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.RunTimeModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RunTimeModelItemProvider runTimeModelItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.RunTimeModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRunTimeModelAdapter() {
		if (runTimeModelItemProvider == null) {
			runTimeModelItemProvider = new RunTimeModelItemProvider(this);
		}

		return runTimeModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.Resource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceItemProvider resourceItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.Resource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceAdapter() {
		if (resourceItemProvider == null) {
			resourceItemProvider = new ResourceItemProvider(this);
		}

		return resourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.AppMetaData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AppMetaDataItemProvider appMetaDataItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.AppMetaData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAppMetaDataAdapter() {
		if (appMetaDataItemProvider == null) {
			appMetaDataItemProvider = new AppMetaDataItemProvider(this);
		}

		return appMetaDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.Specification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpecificationItemProvider specificationItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.Specification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpecificationAdapter() {
		if (specificationItemProvider == null) {
			specificationItemProvider = new SpecificationItemProvider(this);
		}

		return specificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.Trigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriggerItemProvider triggerItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.Trigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriggerAdapter() {
		if (triggerItemProvider == null) {
			triggerItemProvider = new TriggerItemProvider(this);
		}

		return triggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.IfDoSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IfDoSpecItemProvider ifDoSpecItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.IfDoSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIfDoSpecAdapter() {
		if (ifDoSpecItemProvider == null) {
			ifDoSpecItemProvider = new IfDoSpecItemProvider(this);
		}

		return ifDoSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.ElseIfDoSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElseIfDoSpecItemProvider elseIfDoSpecItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.ElseIfDoSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElseIfDoSpecAdapter() {
		if (elseIfDoSpecItemProvider == null) {
			elseIfDoSpecItemProvider = new ElseIfDoSpecItemProvider(this);
		}

		return elseIfDoSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.ElseDoSpec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElseDoSpecItemProvider elseDoSpecItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.ElseDoSpec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElseDoSpecAdapter() {
		if (elseDoSpecItemProvider == null) {
			elseDoSpecItemProvider = new ElseDoSpecItemProvider(this);
		}

		return elseDoSpecItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.EnvironmentMetaData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnvironmentMetaDataItemProvider environmentMetaDataItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.EnvironmentMetaData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnvironmentMetaDataAdapter() {
		if (environmentMetaDataItemProvider == null) {
			environmentMetaDataItemProvider = new EnvironmentMetaDataItemProvider(this);
		}

		return environmentMetaDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.Action} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.Action}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.Element} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementItemProvider elementItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.Element}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementAdapter() {
		if (elementItemProvider == null) {
			elementItemProvider = new ElementItemProvider(this);
		}

		return elementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.OrElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrElementItemProvider orElementItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.OrElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrElementAdapter() {
		if (orElementItemProvider == null) {
			orElementItemProvider = new OrElementItemProvider(this);
		}

		return orElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.AndElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AndElementItemProvider andElementItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.AndElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAndElementAdapter() {
		if (andElementItemProvider == null) {
			andElementItemProvider = new AndElementItemProvider(this);
		}

		return andElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.DiffElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffElementItemProvider diffElementItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.DiffElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffElementAdapter() {
		if (diffElementItemProvider == null) {
			diffElementItemProvider = new DiffElementItemProvider(this);
		}

		return diffElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.EqualElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EqualElementItemProvider equalElementItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.EqualElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEqualElementAdapter() {
		if (equalElementItemProvider == null) {
			equalElementItemProvider = new EqualElementItemProvider(this);
		}

		return equalElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.LargerElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LargerElementItemProvider largerElementItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.LargerElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLargerElementAdapter() {
		if (largerElementItemProvider == null) {
			largerElementItemProvider = new LargerElementItemProvider(this);
		}

		return largerElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.LargerEqualElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LargerEqualElementItemProvider largerEqualElementItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.LargerEqualElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLargerEqualElementAdapter() {
		if (largerEqualElementItemProvider == null) {
			largerEqualElementItemProvider = new LargerEqualElementItemProvider(this);
		}

		return largerEqualElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.SmallerElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SmallerElementItemProvider smallerElementItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.SmallerElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSmallerElementAdapter() {
		if (smallerElementItemProvider == null) {
			smallerElementItemProvider = new SmallerElementItemProvider(this);
		}

		return smallerElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.SmallerEqualElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SmallerEqualElementItemProvider smallerEqualElementItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.SmallerEqualElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSmallerEqualElementAdapter() {
		if (smallerEqualElementItemProvider == null) {
			smallerEqualElementItemProvider = new SmallerEqualElementItemProvider(this);
		}

		return smallerEqualElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.PlusElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlusElementItemProvider plusElementItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.PlusElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlusElementAdapter() {
		if (plusElementItemProvider == null) {
			plusElementItemProvider = new PlusElementItemProvider(this);
		}

		return plusElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.MinusElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MinusElementItemProvider minusElementItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.MinusElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMinusElementAdapter() {
		if (minusElementItemProvider == null) {
			minusElementItemProvider = new MinusElementItemProvider(this);
		}

		return minusElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.MultiplicationElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiplicationElementItemProvider multiplicationElementItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.MultiplicationElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiplicationElementAdapter() {
		if (multiplicationElementItemProvider == null) {
			multiplicationElementItemProvider = new MultiplicationElementItemProvider(this);
		}

		return multiplicationElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.DivisionElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DivisionElementItemProvider divisionElementItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.DivisionElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDivisionElementAdapter() {
		if (divisionElementItemProvider == null) {
			divisionElementItemProvider = new DivisionElementItemProvider(this);
		}

		return divisionElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.ModuloElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuloElementItemProvider moduloElementItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.ModuloElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuloElementAdapter() {
		if (moduloElementItemProvider == null) {
			moduloElementItemProvider = new ModuloElementItemProvider(this);
		}

		return moduloElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.Number_Object} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Number_ObjectItemProvider number_ObjectItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.Number_Object}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumber_ObjectAdapter() {
		if (number_ObjectItemProvider == null) {
			number_ObjectItemProvider = new Number_ObjectItemProvider(this);
		}

		return number_ObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.Boolean_Object} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Boolean_ObjectItemProvider boolean_ObjectItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.Boolean_Object}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoolean_ObjectAdapter() {
		if (boolean_ObjectItemProvider == null) {
			boolean_ObjectItemProvider = new Boolean_ObjectItemProvider(this);
		}

		return boolean_ObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.Resource_Object} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Resource_ObjectItemProvider resource_ObjectItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.Resource_Object}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResource_ObjectAdapter() {
		if (resource_ObjectItemProvider == null) {
			resource_ObjectItemProvider = new Resource_ObjectItemProvider(this);
		}

		return resource_ObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.State_Object} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected State_ObjectItemProvider state_ObjectItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.State_Object}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createState_ObjectAdapter() {
		if (state_ObjectItemProvider == null) {
			state_ObjectItemProvider = new State_ObjectItemProvider(this);
		}

		return state_ObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link nii.bigclout.ecaadapter.dsl.NegateElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NegateElementItemProvider negateElementItemProvider;

	/**
	 * This creates an adapter for a {@link nii.bigclout.ecaadapter.dsl.NegateElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNegateElementAdapter() {
		if (negateElementItemProvider == null) {
			negateElementItemProvider = new NegateElementItemProvider(this);
		}

		return negateElementItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (runTimeModelItemProvider != null) runTimeModelItemProvider.dispose();
		if (stateItemProvider != null) stateItemProvider.dispose();
		if (resourceItemProvider != null) resourceItemProvider.dispose();
		if (appMetaDataItemProvider != null) appMetaDataItemProvider.dispose();
		if (specificationItemProvider != null) specificationItemProvider.dispose();
		if (triggerItemProvider != null) triggerItemProvider.dispose();
		if (ifDoSpecItemProvider != null) ifDoSpecItemProvider.dispose();
		if (elseIfDoSpecItemProvider != null) elseIfDoSpecItemProvider.dispose();
		if (elseDoSpecItemProvider != null) elseDoSpecItemProvider.dispose();
		if (environmentMetaDataItemProvider != null) environmentMetaDataItemProvider.dispose();
		if (actionItemProvider != null) actionItemProvider.dispose();
		if (elementItemProvider != null) elementItemProvider.dispose();
		if (orElementItemProvider != null) orElementItemProvider.dispose();
		if (andElementItemProvider != null) andElementItemProvider.dispose();
		if (diffElementItemProvider != null) diffElementItemProvider.dispose();
		if (equalElementItemProvider != null) equalElementItemProvider.dispose();
		if (largerElementItemProvider != null) largerElementItemProvider.dispose();
		if (largerEqualElementItemProvider != null) largerEqualElementItemProvider.dispose();
		if (smallerElementItemProvider != null) smallerElementItemProvider.dispose();
		if (smallerEqualElementItemProvider != null) smallerEqualElementItemProvider.dispose();
		if (plusElementItemProvider != null) plusElementItemProvider.dispose();
		if (minusElementItemProvider != null) minusElementItemProvider.dispose();
		if (multiplicationElementItemProvider != null) multiplicationElementItemProvider.dispose();
		if (divisionElementItemProvider != null) divisionElementItemProvider.dispose();
		if (moduloElementItemProvider != null) moduloElementItemProvider.dispose();
		if (number_ObjectItemProvider != null) number_ObjectItemProvider.dispose();
		if (boolean_ObjectItemProvider != null) boolean_ObjectItemProvider.dispose();
		if (resource_ObjectItemProvider != null) resource_ObjectItemProvider.dispose();
		if (state_ObjectItemProvider != null) state_ObjectItemProvider.dispose();
		if (negateElementItemProvider != null) negateElementItemProvider.dispose();
	}

}
