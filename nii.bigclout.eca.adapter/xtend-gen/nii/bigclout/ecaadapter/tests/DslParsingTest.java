/**
 * generated by Xtext 2.13.0
 */
package nii.bigclout.ecaadapter.tests;

import com.google.inject.Inject;
import nii.bigclout.ecaadapter.dsl.RunTimeModel;
import nii.bigclout.ecaadapter.tests.DslInjectorProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.util.EmfFormatter;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(XtextRunner.class)
@InjectWith(DslInjectorProvider.class)
@SuppressWarnings("all")
public class DslParsingTest {
  @Inject
  private ParseHelper<RunTimeModel> parseHelper;
  
  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("EnvironmentMetaData {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("name window");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("code window123");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("possibleStates open close");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("name co2_density");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("code co2sensor");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("possibleStates high low medium");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("name airPollution_alert");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("code airPollution121");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("possibleStates ON OFF");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("name AC_room1");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("code ac123");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("possibleStates ON OFF");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("AppMeta SafetyAppMeta {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("spec1");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("on event1 and (event2 or event3)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if time >= 22");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("do window := close");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("spec2");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("on airPollution_alert == ON");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("do window := close and AC_room1 := ON");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("AppMeta EnvironmentAppMeta {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("spec1");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("on ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("if co2_density >= 40");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("do window := open");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("ConceptToCodeMappings {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("//(Element, code)  //For translation...........");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("//or, should it be (resource, state, code)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("(window, close, window.Close.act())");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("(window, open, window.Open.act())");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      final RunTimeModel result = this.parseHelper.parse(_builder);
      InputOutput.<String>println(EmfFormatter.objToStr(result));
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: Å·errors.join(\", \")Å‚");
      Assert.assertTrue(_builder_1.toString(), errors.isEmpty());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
